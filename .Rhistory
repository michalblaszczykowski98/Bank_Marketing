mod.las
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse)
library(readr)
bank_marketing <- read.csv(file = "bank_marketing.csv", header = TRUE, sep = ";")
braki_danych <- sum(is.na(bank_marketing))
duration_0 <- sum(bank_marketing$duration==0)
summary(bank_marketing)
bank_marketing$y <- as.factor(bank_marketing$y)
# Chunk 3
library(AppliedPredictiveModeling)
library(caret)
clean_data <- preProcess(bank_marketing, method = c("center","scale","YeoJohnson","nzv"))
# Chunk 4
bank_marketing <- predict(clean_data, newdata = bank_marketing)
head(bank_marketing)
# Chunk 5
set.seed(2020)
podzial_zbioru <- createDataPartition(bank_marketing$y, p = 2/3)
data.learn <- bank_marketing[podzial_zbioru$Resample1,]
data.test <- bank_marketing[-podzial_zbioru$Resample1,]
# Chunk 6
set.seed(2020)
control <- trainControl(method = "cv", number = 10)
control_2 <- trainControl(method = "cv", number = 5, classProbs = T, summaryFunction = twoClassSummary, savePredictions = T)
# Chunk 7
library(rpart)
library(rpart.plot)
set.seed(2020)
drzewo.rpart <- train(y~., data = data.learn, method = "rpart", trControl = control, tuneLength = 10)
drzewo.rpart
# Chunk 8
rpart.plot(drzewo.rpart$finalModel)
# Chunk 9
rpart.grid <- expand.grid(cp = seq(0.0001,0.03,length.out = 10))
drzewo.rpart_2 <- train(y~., data = data.learn, method = "rpart", trControl = control, tuneGrid = rpart.grid)
drzewo.rpart_2
# Chunk 10
set.seed(2020)
predykcja_1 <- predict(drzewo.rpart, newdata = data.test)
confusionMatrix(predykcja_1, data.test$y, positive = "yes")
# Chunk 11
set.seed(2020)
predykcja_2 <- predict(drzewo.rpart_2, newdata = data.test)
confusionMatrix(predykcja_2, data.test$y, positive = "yes")
# Chunk 12
set.seed(2020)
drzewo.ctree <- train(y~., data = data.learn, method = "ctree", trControl = control, tuneLength = 10)
drzewo.ctree
# Chunk 13
set.seed(2020)
ctree_grid <- expand.grid(mincriterion=0.99999999)
drzewo.ctree_2 <- train(y~., data = data.learn, method = "ctree", trControl = control, tuneGrid = ctree_grid)
drzewo.ctree_2
# Chunk 14
#plot(drzewo.ctree_2$finalModel)
# Chunk 15
set.seed(2020)
predykcja_3 <- predict(drzewo.ctree, newdata = data.test)
confusionMatrix(predykcja_3, data.test$y, positive = "yes")
predykcja_4 <- predict(drzewo.ctree_2, newdata = data.test)
confusionMatrix(predykcja_4, data.test$y, positive = "yes")
# Chunk 16
set.seed(2020)
mod.las <- train(y~., data = data.learn, method = "rf", trControl = control, tuneLength = 10)
mod.las
mod.las$finalModel
drzewo.ctree_2$finalModel
predykcja_5 <- predict(mod.las, newdata = data.test)
confusionMatrix(predykcja_5, data.test$y)
predykcja_5 <- predict(mod.las, newdata = data.test)
confusionMatrix(predykcja_5, data.test$y, positive = "yes")
set.seed(2020)
predykcja_5 <- predict(mod.las, newdata = data.test)
confusionMatrix(predykcja_5, data.test$y, positive = "yes")
set.seed(2020)
predykcja_5 <- predict(mod.las, newdata = data.test)
confusionMatrix(predykcja_5, data.test$y, positive = "yes")
set.seed(2020)
mod.boosting <- train(y~., data = data.learn, method = "gmb", trControl = control, tuneLength = 5)
set.seed(2020)
library(gmb)
mod.boosting <- train(y~., data = data.learn, method = "gmb", trControl = control, tuneLength = 5)
install.packages("gmb")
set.seed(2020)
library(gmb)
mod.boosting <- train(y~., data = data.learn, method = "gmb", trControl = control, tuneLength = 5)
library(gmb)
install.packages("gbm")
library(gbm)
set.seed(2020)
library(gbm)
mod.boosting <- train(y~., data = data.learn, method = "gbm", trControl = control, tuneLength = 5)
mod.boosting
boosting_grid <- expand.grid(c(n.trees = c(500,1000),interaction.depth = 2:6,shrinkage = 0.05,n.minobsinnode = 25))
mod.boosting_2 <- train(y~., data = data.learn, method = "gbm", trControl = control, tuneGrid = boosting_grid)
boosting_grid <- expand.grid(n.trees = c(500,1000),interaction.depth = 2:6,shrinkage = 0.05,n.minobsinnode = 25)
mod.boosting_2 <- train(y~., data = data.learn, method = "gbm", trControl = control, tuneGrid = boosting_grid)
mod.boosting_2
mod.boosting
mod.boosting
mod.boosting_2
set.seed(2020)
predykcja_6 <- predict(mod.boosting, newdata = data.test)
confusionMatrix(predykcja_6, data.test$y, positive = "yes")
set.seed(2020)
predykcja_7 <- predict(mod.boosting_2, newdata = data.test)
confusionMatrix(predykcja_7, data.test$y, positive = "yes")
plot(mod.boosting, plotType = "level")
ggplot(mod.boosting)
mod.boosting_2
library(MASS)
set.seed(2020)
mod.lda <- train(y~., data = data.learn, method = "lda", trControl = control)
mod.lda
predykcja_8 <- predict(mod.lda, newdata = data.test)
confusionMatrix(predykcja_8, data.test$y)
predykcja_8$x
mod.lda$xlevels
predykcja_8
predykcja_8$x
predykcja_8 <- predict(mod.lda, newdata = data.test)
confusionMatrix(predykcja_8, data.test$y)
cbind.data.frame(obs = data.test$y, predykcja_8$x, pred = predykcja_8$class)
set.seed(2020)
predykcja_8 <- predict(mod.lda, newdata = data.test)
confusionMatrix(predykcja_8, data.test$y)
set.seed(2020)
predykcja_8 <- predict(mod.lda, newdata = data.test)
confusionMatrix(predykcja_8, data.test$y)
set.seed(2020)
mod.logistyczna <- train(y~., data = data.test, method = "glm", trControl = control)
mod.logistyczna
summary(mod.logistyczna$finalModel)
set.seed(2020)
mod.logistyczna <- train(y~., data = data.test, method = "glm", trControl = control)
mod.logistyczna
summary(mod.logistyczna$finalModel)
predykcja_9 <- predict(mod.logistyczna, data.test, type = "prob")
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,"yes","no"))
confusionMatrix(predykcja_9, data.test$y)
predykcja_9
predykcja_9 <- predict(mod.logistyczna, data.test, type = "prob")
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,"no","yes"))
confusionMatrix(predykcja_9, data.test$y)
predykcja_9 <- predict(mod.logistyczna, data.test, type = "prob")
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,no,yes))
confusionMatrix(predykcja_9, data.test$y)
predykcja_9 <- predict(mod.logistyczna, data.test, type = "prob")
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,"no","yes"))
confusionMatrix(predykcja_9, data.test$y)
predykcja_9
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,"yes","no"))
predykcja_9 <- predict(mod.logistyczna, data.test, type = "prob")
pred_class <- as.factor(ifelse(predykcja_9[,2]>0.5,"yes","no"))
confusionMatrix(pred_class, data.test$y)
set.seed(2020)
mod.knn <- train(y~., data = data.test, method = "knn", trControl = control, tuneLength = 10)
mod.knn
predykcja_10 <- predict(mod.knn, data.test, type = "class")
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
predykcja_10
pred_class
predykcja_9
predykcja_10
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
pred_class_2 <- as.factor(ifelse(predykcja_10[,2]>0.5,"yes","no"))
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
pred_class_2 <- as.factor(ifelse(predykcja_10[,2]>0.5,"yes","no"))
confusionMatrix(pred_class_2, data.test$y)
mod.bayes <- train(y~., data = data.test, method = "nb", trControl = control, tuneLength = 10)
library(klaR)
mod.bayes2 <- NaiveBayes(y~., data = data.learn)
mod.bayes2
predykcja_bayes_learn <- predict(mod.bayes2, data.learn)
tabelka_ucz <- table(predykcja_bayes_learn, data.learn$y)
predykcja_bayes_learn <- predict(mod.bayes2,bank_marketing)
library(klaR)
mod.bayes2 <- NaiveBayes(y~., data = data.learn)
predykcja_bayes_learn <- predict(mod.bayes2, data.learn)
mod.b <- train(y~., data = data.learn, method = "nb", trControl = control)
data.learn
mod.b <- train(y~., data = data.learn, method = "nbDiscrete", trControl = control)
mod.bayes2 <- NaiveBayes(y~., data = data.learn)
set.seed(2020)
predykcja_bayes_learn <- predict(mod.bayes2, data.learn)
predykcja_bayes_learn
pred_class_3 <- as.factor(ifelse(predykcja_bayes_learn[,2]>0.5,"yes","no"))
pred_class_3 <- as.factor(ifelse(predykcja_bayes_learn[,2]>0.5,"yes","no"))
predykcja_bayes_learn <- predict(mod.bayes2, data.learn)
predykcja_bayes_learn[,2]
predykcja_bayes_learn[,1]
predykcja_bayes_learn[,]
predykcja_bayes_learn[1]
predykcja_bayes_learn[1,]
predykcja_bayes_learn[[1]]
predykcja_bayes_learn[[2]]
predykcja_bayes_learn[[2]][[2]]
predykcja_bayes_learn[[2]][[1]]
predykcja_bayes_learn[[1]][[1]]
predykcja_bayes_learn[[1]]
predykcja_bayes_learn[[2]]
mod.bayes2 <- NaiveBayes(y~., data = data.learn)
predykcja_bayes_learn <- predict(mod.bayes2, data.learn, type = "prob")
mod.knn <- train(y~., data = data.test, method = "knn", trControl = control, tuneLength = 10)
pred_class_3 <- as.factor(ifelse(predykcja_bayes_learn[,2]>0.5,"yes","no"))
predykcja_bayes_learn[,2]
predykcja_bayes_learn[1]
predykcja_bayes_learn[2]
predykcja_bayes_learn[3]
predykcja_bayes_learn[2]
set.seed(2020)
library(klaR)
mod.b <- train(y~., data = data.learn, method = "nbDiscrete", trControl = control)
mod.bayes2 <- NaiveBayes(y~., data = data.learn)
predykcja_bayes_learn <- predict(mod.b, data.learn, type = "prob")
pred_class_3 <- as.factor(ifelse(predykcja_bayes_learn[,2]>0.5,"yes","no"))
tabelka_ucz <- table(predykcja_bayes_learn, data.learn$y)
mod.b <- train(y~., data = data.learn, method = "nbDiscrete", trControl = control)
mod.b <- train(y~., data = data.learn, method = "nb", trControl = control)
library(e1071)
set.seed(2020)
mod.knn <- train(y~., data = data.learn, method = "knn", trControl = control, tuneLength = 10)
mod.knn
set.seed(2020)
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
pred_class_2 <- as.factor(ifelse(predykcja_10[,2]>0.5,"yes","no"))
confusionMatrix(pred_class_2, data.test$y)
set.seed(2020)
mod.knn <- train(y~., data = data.learn, method = "knn", trControl = control, tuneLength = 10)
mod.knn
set.seed(2020)
predykcja_10 <- predict(mod.knn, data.test, type = "prob")
pred_class_2 <- as.factor(ifelse(predykcja_10[,2]>0.5,"yes","no"))
confusionMatrix(pred_class_2, data.test$y)
mod.bayes <- train(y~., data = data.learn, method = "nb", trControl = control)
View(data.learn)
data.learn[1]
Y <- data.learn[16]
X <- data.learn[-16]
Y
mod.bayes <- train(X,Y,method = "nb", trControl = control)
Y <- as.factor(Y)
Y
zbior1 <- data.learn[-16]
zbior2 <- data.learn[16]
zbior1
zbior2
zbior2$y <- as.factor(zbior2$y)
mod.bayes <- train(zbior1,zbior2,method = "nb", trControl = control)
zbior2
is.factor(zbior2$y)
set.seed(2020)
library(klaR)
library(e1071)
zbior11 <- data.learn[,-16]
zbior22 <- data.learn[,16]
zbior22$y <- as.factor(zbior22$y)
mod.bayes <- train(zbior11,zbior22,method = "nb", trControl = control)
zbior22
zbior11
mod.bayes <- train(data.learn,data.test,method = "nb", trControl = control)
set.seed(2020)
library(klaR)
library(e1071)
xTrain <- bank_marketing[,-"y"]
xTrain <- bank_marketing[,-16]
yTrain <- bank_marketing$y
is.factor(yTrain)
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
warninings()
warnings()
mod.bayes
pre <- predict(mod.bayes,yTrain)
yTrain
mod.bayes$finalModel
mod.bayes
pre <- predict(mod.bayes$finalModel,yTrain)
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
xTrain <- data.learn[,-16]
yTrain <- data.learn$y
xTest <- data.test[,-16]
yTest <- data.test$y
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
pre <- predict(mod.bayes$finalModel,xTest)
pre
pre <- predict(mod.bayes$finalModel,xTest)$class
pre
sum(diag(prop.table(pre,yTest)))
prop.table(pre)
pre <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre, yTest)
mod.bayes
set.seed(2020)
library(klaR)
library(e1071)
xTrain <- data.learn[,-16]
yTrain <- data.learn$y
xTest <- data.test[,-16]
yTest <- data.test$y
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
mod.bayes
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre,yTest)
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre,yTest, positive = "yes")
set.seed(2020)
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre,yTest, positive = "yes")
set.seed(2020)
library(klaR)
library(e1071)
xTrain <- data.learn[,-16]
yTrain <- data.learn$y
xTest <- data.test[,-16]
yTest <- data.test$y
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
mod.bayes
set.seed(2020)
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre,yTest, positive = "yes")
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
set.seed(2020)
library(klaR)
library(e1071)
xTrain <- data.learn[,-16]
yTrain <- data.learn$y
xTest <- data.test[,-16]
yTest <- data.test$y
mod.bayes <- train(xTrain,yTrain,"nb",trControl = control)
mod.bayes
set.seed(2020)
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(pre,yTest, positive = "yes")
set.seed(2020)
predykcja_bayes <- predict(mod.bayes$finalModel,xTest)$class
confusionMatrix(predykcja_bayes,yTest, positive = "yes")
porownanie <- resamples(list(Drzewo_Cart = drzewo.rpart, Drzewo_Ctree = drzewo.ctree, Las_losowy = mod.las, Boosting = mod.boosting,
LDA = mod.lda, Regresja_log = mod.logistyczna, KNN = mod.knn, Bayes = mod.bayes))
porownanie <- resamples(list(Drzewo_Cart = drzewo.rpart, Drzewo_Ctree = drzewo.ctree, Las_losowy = mod.las, Boosting = mod.boosting,
LDA = mod.lda, Regresja_log = mod.logistyczna, KNN = mod.knn, Bayes = mod.bayes))
summary(porownanie)
porownanie
summary(porownanie)
bwplot(porownanie)
dotPlot(porownanie)
dotplot(porownanie)
bwplot(porownanie)
splom(porownanie)
bwplot(porownanie)
roznice <- diff(porownanie)
roznice
roznice <- diff(porownanie)
roznice
bwplot(porownanie)
roznice <- diff(porownanie)
dotplot(roznice)
bwplot(porownanie)
roznice <- diff(porownanie)
dotplot(roznice)
bwplot(porownanie)
porownanie <- resamples(list(Drzewo_Cart = drzewo.rpart, Drzewo_Ctree = drzewo.ctree, Las_losowy = mod.las, Boosting = mod.boosting,
LDA = mod.lda, Regresja_log = mod.logistyczna, KNN = mod.knn, Bayes = mod.bayes))
summary(porownanie)
